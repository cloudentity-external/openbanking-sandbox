// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp/pkg/swagger/models"
)

// AcceptGlobalLoginRequestReader is a Reader for the AcceptGlobalLoginRequest structure.
type AcceptGlobalLoginRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptGlobalLoginRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptGlobalLoginRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAcceptGlobalLoginRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcceptGlobalLoginRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptGlobalLoginRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAcceptGlobalLoginRequestOK creates a AcceptGlobalLoginRequestOK with default headers values
func NewAcceptGlobalLoginRequestOK() *AcceptGlobalLoginRequestOK {
	return &AcceptGlobalLoginRequestOK{}
}

/*AcceptGlobalLoginRequestOK handles this case with default header values.

LoginAccepted
*/
type AcceptGlobalLoginRequestOK struct {
	Payload *models.LoginAccepted
}

func (o *AcceptGlobalLoginRequestOK) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/accept][%d] acceptGlobalLoginRequestOK  %+v", 200, o.Payload)
}

func (o *AcceptGlobalLoginRequestOK) GetPayload() *models.LoginAccepted {
	return o.Payload
}

func (o *AcceptGlobalLoginRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginAccepted)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptGlobalLoginRequestUnauthorized creates a AcceptGlobalLoginRequestUnauthorized with default headers values
func NewAcceptGlobalLoginRequestUnauthorized() *AcceptGlobalLoginRequestUnauthorized {
	return &AcceptGlobalLoginRequestUnauthorized{}
}

/*AcceptGlobalLoginRequestUnauthorized handles this case with default header values.

HttpError
*/
type AcceptGlobalLoginRequestUnauthorized struct {
	Payload *models.Error
}

func (o *AcceptGlobalLoginRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/accept][%d] acceptGlobalLoginRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *AcceptGlobalLoginRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptGlobalLoginRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptGlobalLoginRequestForbidden creates a AcceptGlobalLoginRequestForbidden with default headers values
func NewAcceptGlobalLoginRequestForbidden() *AcceptGlobalLoginRequestForbidden {
	return &AcceptGlobalLoginRequestForbidden{}
}

/*AcceptGlobalLoginRequestForbidden handles this case with default header values.

HttpError
*/
type AcceptGlobalLoginRequestForbidden struct {
	Payload *models.Error
}

func (o *AcceptGlobalLoginRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/accept][%d] acceptGlobalLoginRequestForbidden  %+v", 403, o.Payload)
}

func (o *AcceptGlobalLoginRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptGlobalLoginRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptGlobalLoginRequestNotFound creates a AcceptGlobalLoginRequestNotFound with default headers values
func NewAcceptGlobalLoginRequestNotFound() *AcceptGlobalLoginRequestNotFound {
	return &AcceptGlobalLoginRequestNotFound{}
}

/*AcceptGlobalLoginRequestNotFound handles this case with default header values.

HttpError
*/
type AcceptGlobalLoginRequestNotFound struct {
	Payload *models.Error
}

func (o *AcceptGlobalLoginRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/accept][%d] acceptGlobalLoginRequestNotFound  %+v", 404, o.Payload)
}

func (o *AcceptGlobalLoginRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptGlobalLoginRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
