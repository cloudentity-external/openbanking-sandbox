// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp/pkg/swagger/models"
)

// GetGlobalLoginRequestReader is a Reader for the GetGlobalLoginRequest structure.
type GetGlobalLoginRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGlobalLoginRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGlobalLoginRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGlobalLoginRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGlobalLoginRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGlobalLoginRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetGlobalLoginRequestOK creates a GetGlobalLoginRequestOK with default headers values
func NewGetGlobalLoginRequestOK() *GetGlobalLoginRequestOK {
	return &GetGlobalLoginRequestOK{}
}

/*GetGlobalLoginRequestOK handles this case with default header values.

LoginSessionResponse
*/
type GetGlobalLoginRequestOK struct {
	Payload *models.LoginSessionResponse
}

func (o *GetGlobalLoginRequestOK) Error() string {
	return fmt.Sprintf("[GET /api/system/logins/{login}][%d] getGlobalLoginRequestOK  %+v", 200, o.Payload)
}

func (o *GetGlobalLoginRequestOK) GetPayload() *models.LoginSessionResponse {
	return o.Payload
}

func (o *GetGlobalLoginRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginSessionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalLoginRequestUnauthorized creates a GetGlobalLoginRequestUnauthorized with default headers values
func NewGetGlobalLoginRequestUnauthorized() *GetGlobalLoginRequestUnauthorized {
	return &GetGlobalLoginRequestUnauthorized{}
}

/*GetGlobalLoginRequestUnauthorized handles this case with default header values.

HttpError
*/
type GetGlobalLoginRequestUnauthorized struct {
	Payload *models.Error
}

func (o *GetGlobalLoginRequestUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/system/logins/{login}][%d] getGlobalLoginRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGlobalLoginRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGlobalLoginRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalLoginRequestForbidden creates a GetGlobalLoginRequestForbidden with default headers values
func NewGetGlobalLoginRequestForbidden() *GetGlobalLoginRequestForbidden {
	return &GetGlobalLoginRequestForbidden{}
}

/*GetGlobalLoginRequestForbidden handles this case with default header values.

HttpError
*/
type GetGlobalLoginRequestForbidden struct {
	Payload *models.Error
}

func (o *GetGlobalLoginRequestForbidden) Error() string {
	return fmt.Sprintf("[GET /api/system/logins/{login}][%d] getGlobalLoginRequestForbidden  %+v", 403, o.Payload)
}

func (o *GetGlobalLoginRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGlobalLoginRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalLoginRequestNotFound creates a GetGlobalLoginRequestNotFound with default headers values
func NewGetGlobalLoginRequestNotFound() *GetGlobalLoginRequestNotFound {
	return &GetGlobalLoginRequestNotFound{}
}

/*GetGlobalLoginRequestNotFound handles this case with default header values.

HttpError
*/
type GetGlobalLoginRequestNotFound struct {
	Payload *models.Error
}

func (o *GetGlobalLoginRequestNotFound) Error() string {
	return fmt.Sprintf("[GET /api/system/logins/{login}][%d] getGlobalLoginRequestNotFound  %+v", 404, o.Payload)
}

func (o *GetGlobalLoginRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGlobalLoginRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
