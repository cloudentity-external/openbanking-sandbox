// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp/pkg/swagger/models"
)

// RejectGlobalLoginRequestReader is a Reader for the RejectGlobalLoginRequest structure.
type RejectGlobalLoginRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectGlobalLoginRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectGlobalLoginRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRejectGlobalLoginRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRejectGlobalLoginRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectGlobalLoginRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRejectGlobalLoginRequestOK creates a RejectGlobalLoginRequestOK with default headers values
func NewRejectGlobalLoginRequestOK() *RejectGlobalLoginRequestOK {
	return &RejectGlobalLoginRequestOK{}
}

/*RejectGlobalLoginRequestOK handles this case with default header values.

LoginRejected
*/
type RejectGlobalLoginRequestOK struct {
	Payload *models.LoginRejected
}

func (o *RejectGlobalLoginRequestOK) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/reject][%d] rejectGlobalLoginRequestOK  %+v", 200, o.Payload)
}

func (o *RejectGlobalLoginRequestOK) GetPayload() *models.LoginRejected {
	return o.Payload
}

func (o *RejectGlobalLoginRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginRejected)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectGlobalLoginRequestUnauthorized creates a RejectGlobalLoginRequestUnauthorized with default headers values
func NewRejectGlobalLoginRequestUnauthorized() *RejectGlobalLoginRequestUnauthorized {
	return &RejectGlobalLoginRequestUnauthorized{}
}

/*RejectGlobalLoginRequestUnauthorized handles this case with default header values.

HttpError
*/
type RejectGlobalLoginRequestUnauthorized struct {
	Payload *models.Error
}

func (o *RejectGlobalLoginRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/reject][%d] rejectGlobalLoginRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *RejectGlobalLoginRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectGlobalLoginRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectGlobalLoginRequestForbidden creates a RejectGlobalLoginRequestForbidden with default headers values
func NewRejectGlobalLoginRequestForbidden() *RejectGlobalLoginRequestForbidden {
	return &RejectGlobalLoginRequestForbidden{}
}

/*RejectGlobalLoginRequestForbidden handles this case with default header values.

HttpError
*/
type RejectGlobalLoginRequestForbidden struct {
	Payload *models.Error
}

func (o *RejectGlobalLoginRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/reject][%d] rejectGlobalLoginRequestForbidden  %+v", 403, o.Payload)
}

func (o *RejectGlobalLoginRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectGlobalLoginRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectGlobalLoginRequestNotFound creates a RejectGlobalLoginRequestNotFound with default headers values
func NewRejectGlobalLoginRequestNotFound() *RejectGlobalLoginRequestNotFound {
	return &RejectGlobalLoginRequestNotFound{}
}

/*RejectGlobalLoginRequestNotFound handles this case with default header values.

HttpError
*/
type RejectGlobalLoginRequestNotFound struct {
	Payload *models.Error
}

func (o *RejectGlobalLoginRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/logins/{login}/reject][%d] rejectGlobalLoginRequestNotFound  %+v", 404, o.Payload)
}

func (o *RejectGlobalLoginRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectGlobalLoginRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
